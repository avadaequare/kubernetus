secrets:
In Kubernetes, a Secret is an object that stores sensitive data, such as passwords, OAuth tokens, SSH keys, or any other confidential information. Secrets help to manage sensitive information and ensure that it is not exposed in the application code or configuration files.

Key Characteristics of Kubernetes Secrets:
Data Encapsulation: Secrets allow you to encapsulate sensitive data separately from application code and configurations, reducing the risk of accidental exposure.

Base64 Encoding: The data stored in a Secret is Base64 encoded. However, it's important to note that Base64 encoding is not encryption; it's just a way to encode binary data into a textual form.

Mounting as Volumes or Environment Variables: Secrets can be made available to Pods in two ways:

As files in a volume: You can mount a Secret as a volume, and each key in the Secret becomes a file in the volume. The file contents are the base64-decoded values of the corresponding key.
As environment variables: Secrets can also be exposed as environment variables, where each key-value pair in the Secret becomes an environment variable in the Pod.
Namespace Scoped: Secrets are namespace-scoped, meaning they are only accessible within the namespace they are created in. This scope restriction helps limit access to sensitive data.

Types of Secrets: Kubernetes supports different types of Secrets, such as:

Opaque: A general-purpose Secret that stores arbitrary key-value pairs.
docker-registry: Stores credentials for accessing Docker registries.
tls: Stores a TLS private key and certificate pair.
Access Control: Access to Secrets is controlled through Kubernetes RBAC (Role-Based Access Control) policies, which can restrict who can view or modify the Secrets.

Security Considerations: While Kubernetes Secrets provide a convenient way to manage sensitive data, they are not encrypted by default. It's essential to ensure secure storage and transmission of Secrets and consider additional encryption mechanisms if necessary.



---
apiVersion: v1 
kind: Pod 
metadata:
  labels:
    name: webapp-pod
  name: webapp-pod
  namespace: default 
spec:
  containers:
  - image: kodekloud/simple-webapp-mysql
    imagePullPolicy: Always
    name: webapp
    envFrom:
    - secretRef:
        name: db-secret
